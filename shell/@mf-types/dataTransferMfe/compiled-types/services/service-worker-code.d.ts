export declare const serviceWorkerCode = "\n// Service Worker for data transfer operations\nconst SW_VERSION = \"1.0.1\";\nconst CACHE_NAME = \"data-transfer-cache-v1\";\n\n// Log functionality\nconst logSW = (level, ...args) => {\n  const prefix = \"[Service Worker]\";\n  switch(level) {\n    case \"error\":\n      console.error(prefix, ...args);\n      break;\n    case \"warn\":\n      console.warn(prefix, ...args);\n      break;\n    default:\n      console.log(prefix, ...args);\n  }\n};\n\n// Install event - set up any caches needed\nself.addEventListener(\"install\", (event) => {\n  logSW(\"info\", \"Installing Service Worker...\", SW_VERSION);\n  self.skipWaiting(); // Ensure service worker activates immediately\n});\n\n// Activate event - clean up old caches\nself.addEventListener(\"activate\", (event) => {\n  logSW(\"info\", \"Activating Service Worker...\", SW_VERSION);\n  event.waitUntil(\n    caches.keys().then((cacheNames) => {\n      return Promise.all(\n        cacheNames.map((name) => {\n          if (name !== CACHE_NAME) {\n            logSW(\"info\", \"Removing old cache:\", name);\n            return caches.delete(name);\n          }\n        })\n      );\n    })\n  );\n  logSW(\"info\", \"Taking control of clients...\");\n  return self.clients.claim(); // Take control of clients immediately\n});\n\n// Function to broadcast a message to all clients\nconst broadcastToClients = async (message) => {\n  try {\n    const clients = await self.clients.matchAll();\n    logSW(\"info\", `Broadcasting to ${clients.length} clients`);\n    \n    clients.forEach((client) => {\n      client.postMessage(message);\n    });\n  } catch (error) {\n    logSW(\"error\", \"Error broadcasting to clients:\", error);\n  }\n};\n\n// Message event - handle messages from the main thread\nself.addEventListener(\"message\", (event) => {\n  logSW(\"info\", \"Message received:\", event.data);\n  const { type, data } = event.data;\n\n  switch (type) {\n    case \"PING\":\n      try {\n        logSW(\"info\", \"Ping received, sending PONG...\");\n        event.ports[0].postMessage({\n          type: \"PONG\",\n          data: { version: SW_VERSION, timestamp: new Date().toISOString() },\n        });\n      } catch (error) {\n        logSW(\"error\", \"Error handling PING:\", error);\n      }\n      break;\n\n    case \"TRANSFER_CHUNK\":\n      // Process data transfer in the background\n      logSW(\"info\", `Processing chunk ${data.chunkId} with ${data.items.length} items`);\n      \n      event.waitUntil(\n        processDataTransfer(data.items, data.targetUrl, data.chunkId)\n          .then((result) => {\n            // Notify all clients of the result\n            broadcastToClients({\n              type: \"TRANSFER_CHUNK_RESULT\",\n              data: {\n                chunkId: data.chunkId,\n                success: true,\n                result,\n              },\n            });\n          })\n          .catch((error) => {\n            logSW(\"error\", `Error processing chunk ${data.chunkId}:`, error);\n            \n            // Notify all clients of the error\n            broadcastToClients({\n              type: \"TRANSFER_CHUNK_RESULT\",\n              data: {\n                chunkId: data.chunkId,\n                success: false,\n                error: error.message || \"Unknown error\",\n              },\n            });\n          })\n      );\n      break;\n\n    default:\n      logSW(\"warn\", \"Unknown message type:\", type);\n  }\n});\n\n// Function to process data transfer\nasync function processDataTransfer(items, targetUrl, chunkId) {\n  logSW(\n    \"info\",\n    `Processing chunk ${chunkId}: ${items.length} items to ${targetUrl}`\n  );\n\n  try {\n    // Handle empty items array\n    if (!items || !Array.isArray(items) || items.length === 0) {\n      throw new Error(\"No items to process\");\n    }\n    \n    // Direct fetch without using service worker cache\n    const response = await fetch(targetUrl, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(items),\n      // Bypass service worker cache\n      cache: \"no-store\",\n      // Add credentials if needed\n      credentials: \"same-origin\",\n    });\n\n    if (!response.ok) {\n      const responseText = await response.text();\n      throw new Error(\n        `HTTP error ${response.status}: ${response.statusText}. ${responseText}`\n      );\n    }\n\n    const result = await response.json();\n    logSW(\"info\", `Chunk ${chunkId} transfer successful:`, result);\n    return result;\n  } catch (error) {\n    logSW(\"error\", `Chunk ${chunkId} transfer failed:`, error);\n    throw error;\n  }\n}\n";
